$schema: http://json-schema.org/draft-07/schema#
$id: https://serverlessworkflow.io/schemas/1.0.0/workflow.yaml
type: object
properties:
  id:
    type: string
    description: "Unique workflow identifier"
  specVersion:
    type: string
    enum: ["1.0"]
    description: "Serverless Workflow specification version"
  version:
    type: string
    description: "Workflow version"
  name:
    type: string
    description: "Workflow name"
  description:
    type: string
    description: "Workflow description"
  start:
    type: [string, object]
    description: "Starting state name or definition"
    oneOf:
      - type: string
      - $ref: "#/$defs/StartDefinition"
  functions:
    type: array
    items:
      $ref: "#/$defs/Function"
    description: "List of function definitions"
  states:
    type: array
    items:
      $ref: "#/$defs/State"
    description: "List of workflow states"
  subWorkflows:
    type: array
    items:
      $ref: "#"
    description: "List of embedded sub-workflows"
required: [id, specVersion, states]
$defs:
  Function:
    type: object
    properties:
      name:
        type: string
        pattern: "^[^.]+$"
        description: "Unique function name, no dots allowed"
      type:
        type: string
        enum: [custom, expression]
        description: "Type of function (custom or expression)"
      operation:
        type: string
        description: "Operation identifier, may include dots (e.g., 'AGENT1.method1')"
      comment:
        type: string
        description: "Quoted string explaining the shape of the returned data, e.g., 'Returns int', 'Returns object (e.g., {\"key\": \"value\"})'"
    required: [name, type, operation, comment]
  State:
    type: object
    oneOf:
      - $ref: "#/$defs/OperationState"
      - $ref: "#/$defs/ForEachState"
      - $ref: "#/$defs/SwitchState"
      - $ref: "#/$defs/SubflowState"
      - $ref: "#/$defs/ParallelState"
      - $ref: "#/$defs/EndState"
  OperationState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: operation
      actions:
        type: array
        items:
          $ref: "#/$defs/Action"
      actionMode:
        type: string
        enum: [sequential, parallel]
        description: "Execution mode for actions (sequential or parallel)"
      stateDataFilter:
        $ref: "#/$defs/StateDataFilter"
      transition:
        type: string
        description: "Next state to transition to"
      end:
        type: [boolean, object]
        description: "End workflow execution"
    required: [name, type, actions]
    oneOf:
      - required: [transition]
      - required: [end]
  ForEachState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: foreach
      inputCollection:
        type: string
        description: "JQ expression selecting the list to iterate over"
      iterationParam:
        type: string
        description: "Parameter name for each iteration item"
      iterator:
        type: array
        items:
          $ref: "#/$defs/State"
        description: "States to execute for each item"
      stateDataFilter:
        $ref: "#/$defs/StateDataFilter"
      transition:
        type: string
        description: "Next state to transition to"
      end:
        type: [boolean, object]
        description: "End workflow execution"
    required: [name, type, inputCollection]
    oneOf:
      - required: [transition]
      - required: [end]
  SwitchState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: switch
      dataConditions:
        type: array
        items:
          type: object
          properties:
            condition:
              type: string
              description: "JQ expression for condition evaluation"
            transition:
              type: string
              description: "Next state to transition to if condition is true"
          required: [condition, transition]
        description: "Conditions for routing to states"
      defaultCondition:
        type: object
        properties:
          transition:
            type: string
            description: "Default state to transition to"
      stateDataFilter:
        $ref: "#/$defs/StateDataFilter"
      transition:
        type: string
        description: "Next state to transition to"
      end:
        type: [boolean, object]
        description: "End workflow execution"
    required: [name, type]
    oneOf:
      - required: [transition]
      - required: [end]
  SubflowState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: subflow
      workflowId:
        type: string
        description: "ID of the sub-workflow to execute"
      stateDataFilter:
        $ref: "#/$defs/StateDataFilter"
      transition:
        type: string
        description: "Next state to transition to"
      end:
        type: [boolean, object]
        description: "End workflow execution"
    required: [name, type, workflowId]
    oneOf:
      - required: [transition]
      - required: [end]
  ParallelState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: parallel
      branches:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            states:
              type: array
              items:
                $ref: "#/$defs/State"
              description: "States within the branch"
          required: [name, states]
        description: "Parallel execution branches"
      completionType:
        type: string
        enum: [allOf, atLeast]
        description: "Condition for branch completion"
      stateDataFilter:
        $ref: "#/$defs/StateDataFilter"
      transition:
        type: string
        description: "Next state to transition to"
      end:
        type: [boolean, object]
        description: "End workflow execution"
    required: [name, type, branches]
    oneOf:
      - required: [transition]
      - required: [end]
  EndState:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        const: end
    required: [name, type]
  Action:
    type: object
    properties:
      name:
        type: string
      functionRef:
        type: [string, object]
        properties:
          refName:
            type: string
            description: "Reference to a function name"
          arguments:
            type: object
            description: "Function arguments as a JQ expression"
        required: [refName]
      subflowRef:
        type: string
        description: "Reference to a sub-workflow ID"
      dataOutput:
        type: string
        description: "JSONPath to merge action output, e.g., '.context.<StateName>Output.<functionName>' or '.context.<StateName>Output.<BranchName>Output' for branches"
  StateDataFilter:
    type: object
    properties:
      input:
        type: string
        description: "JQ expression to filter state input"
      output:
        type: string
        description: "JSONPath to merge state output, e.g., '.context'"